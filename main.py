def find_market_price(table, max_discount, demand):
    market_price = None
    total_units = 0

    # Sort the table by price in ascending order
    sorted_table = sorted(table, key=lambda x: x[2])  # Sort by price (third column)

    # Iterate through the sorted table
    for competitor in sorted_table:
        units_sold = min(competitor[1], demand - total_units)  # Units sold by this competitor
        total_units += units_sold
        revenue = units_sold * competitor[2]  # Revenue generated by selling these units

        # Check if demand is reached
        if total_units >= demand:
            market_price = competitor[2]  # Set market price
            break  # Stop iterating

    # Calculate epsilon
    epsilon = market_price * max_discount

    return market_price, epsilon


# revenue = units_sold * competitor[2]  # Revenue generated by selling these units
def find_available_quantity(table, demand, treshold, previous_amount):
    total_units = 0
    units_sold = 0
    # Sort the table by price in ascending order
    sorted_table = sorted(table, key=lambda x: x[2])  # Sort by price (third column)
    # Iterate through the sorted table
    previous_competitor = sorted_table[1]
    for competitor in sorted_table:

        units_sold = min(competitor[1], demand - total_units)  # Units sold by this competitor
        total_units += units_sold

        # Check if demand is reached (300)
        if total_units >= demand:
            if (competitor[1] + previous_competitor[1] >= previous_amount + treshold):
                print("cmp is ", competitor[0])
            print("cmp + prev is ", competitor[1] + previous_competitor[1])
            units_sold = competitor[1]  # Set market price
            break  # Stop iterating
    previous_competitor = competitor
    return units_sold


def find_amount_to_be_produced(available_qty, treshold, previous_amount):
    qty = None

    if (available_qty >= previous_amount + treshold):
        print(1)
        qty = previous_amount + treshold
    elif (available_qty <= previous_amount - treshold):
        print(2)
        qty = previous_amount - treshold
    else:
        print(3)
        qty = available_qty
    return qty


# Example table with competitor data: (Name, Units, Price)
table = [
    ("Firma A", 60, 10),
    ("Firma B", 150, 12),
    ("Firma C", 50, 11),  ## Wir mit 110,11
    ("Firma D", 190, 9)
]

# Maximum discount for Firm E
max_discount = 0.10  # 10%
demand = 300
treshold = 10
lastqty = 100

market_price, epsilon = find_market_price(table, max_discount, demand)
available_qty = find_available_quantity(table, demand, treshold, lastqty)
amount = find_amount_to_be_produced(available_qty, treshold, lastqty)

print("Marktpreis:", market_price)
print("Epsilon:", epsilon)
print("Available QTY ", available_qty)
print("Amount to be produced: ", amount)
